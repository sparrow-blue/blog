# SConstruct
import os

env = Environment()

build_dir = '../build'
src_dir = '.'

env.VariantDir(build_dir, src_dir, duplicate=False)
build_env = env.Clone()

books_head_first_design_patterns_singleton_dir = os.path.join(build_dir, 'head_first_design_patterns', 'one_of_a_king_object')

build_env.Append(CPPPATH=[os.path.join(Dir('#').abspath, books_head_first_design_patterns_singleton_dir)])
build_env.Append(CCFLAGS=['-g', '-O0', '-std=c++20'])

singleton = build_env.Program(
    target = os.path.join(books_head_first_design_patterns_singleton_dir, "singleton"),
    source = [os.path.join(books_head_first_design_patterns_singleton_dir, "singleton.cpp")]
)

singleton_static_initializer = build_env.Program(
    target = os.path.join(books_head_first_design_patterns_singleton_dir, "singleton_static_initializer"),
    source = [os.path.join(books_head_first_design_patterns_singleton_dir, "singleton_static_initializer.cpp")]
)

books_head_first_design_patterns_template_method_dir = os.path.join(build_dir, 'head_first_design_patterns', 'encapsulating_algorithm')

build_env.Append(CPPPATH=[os.path.join(Dir('#').abspath, books_head_first_design_patterns_template_method_dir)])
build_env.Append(CCFLAGS=['-g', '-O0', '-std=c++20'])

template_method = build_env.Program(
    target = os.path.join(books_head_first_design_patterns_template_method_dir, "caffeine_beverage"),
    source = [os.path.join(books_head_first_design_patterns_template_method_dir, "caffeine_beverage.cpp")]
)


design_pattern_dir = os.path.join(build_dir, 'design_pattern')

build_env.Append(CPPPATH=[os.path.join(Dir('#').abspath, design_pattern_dir)])
build_env.Append(CCFLAGS=['-g', '-O0', '-std=c++20'])

command_pattern = build_env.Program(
    target = os.path.join(design_pattern_dir, "command_pattern"),
    source = [os.path.join(design_pattern_dir, "command_pattern.cpp")]
)

observer_pattern = build_env.Program(
    target = os.path.join(design_pattern_dir, "observer_pattern"),
    source = [os.path.join(design_pattern_dir, "observer_pattern.cpp")]
)

observable_member = build_env.Program(
    target = os.path.join(design_pattern_dir, "observable_member"),
    source = [os.path.join(design_pattern_dir, "observable_member.cpp")]
)

Default(singleton, singleton_static_initializer, template_method, command_pattern, observer_pattern, observable_member)
