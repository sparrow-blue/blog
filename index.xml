<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design and Implementation</title><link>https://sparrow-blue.github.io/blog/</link><description>Recent content on Design and Implementation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 24 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://sparrow-blue.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>オブジェクトを事情通に / Keeping your objects in the know</title><link>https://sparrow-blue.github.io/blog/posts/books/head_first_design_patterns/02_keeping_your_objects_in_the_know/</link><pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate><guid>https://sparrow-blue.github.io/blog/posts/books/head_first_design_patterns/02_keeping_your_objects_in_the_know/</guid><description/><content/></item><item><title>唯一のオブジェクト / One of a king object</title><link>https://sparrow-blue.github.io/blog/posts/books/head_first_design_patterns/05_one_of_a_king_object/</link><pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate><guid>https://sparrow-blue.github.io/blog/posts/books/head_first_design_patterns/05_one_of_a_king_object/</guid><description>Singleton Pattern インスタンスを 1 つしか必要としないオブジェクトは存在し，そのケースで複数のインスタンスを生成すると問題になるケースが存在する． Thread pool Cache Dialogbox Logger</description><content>&lt;h2 id="singleton-pattern">Singleton Pattern&lt;/h2>
&lt;p>インスタンスを 1 つしか必要としないオブジェクトは存在し，そのケースで複数のインスタンスを生成すると問題になるケースが存在する．&lt;/p>
&lt;ul>
&lt;li>Thread pool&lt;/li>
&lt;li>Cache&lt;/li>
&lt;li>Dialogbox&lt;/li>
&lt;li>Logger&lt;/li>
&lt;li>etc.&lt;/li>
&lt;/ul>
&lt;p>Singleton Pattern はインスタンスを 1 つだけ生成する仕組みである．&lt;/p>
&lt;p>典型的にはコンストラクタを非公開，つまり private にすることで (外部から) 生成を禁ずる．&lt;/p>
&lt;details open>
&lt;summary>head_first_design_patterns/one_of_a_king_object/singleton.cpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Singleton&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#75715e">// 外部からのインスタンス化を禁ずる．
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Singleton() {}
&lt;span style="color:#66d9ef">static&lt;/span> Singleton&lt;span style="color:#f92672">*&lt;/span> singleton_;
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">static&lt;/span> Singleton&lt;span style="color:#f92672">*&lt;/span> GetInstance() {
&lt;span style="color:#75715e">// 内部からであればコンストラクタが呼べる．
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>singleton_) singleton_ &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Singleton();
&lt;span style="color:#66d9ef">return&lt;/span> singleton_;
}
&lt;span style="color:#75715e">// コピーコンストラクタなどは delete で禁止しなければならない．
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Singleton(&lt;span style="color:#66d9ef">const&lt;/span> Singleton&lt;span style="color:#f92672">&amp;amp;&lt;/span> other) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> Singleton&lt;span style="color:#f92672">&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
};
Singleton&lt;span style="color:#f92672">*&lt;/span> Singleton&lt;span style="color:#f92672">::&lt;/span>singleton_ &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">nullptr&lt;/span>;
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#75715e">// コンストラクタが private なので外部からインスタンス化できない．
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// auto singleton = new Singleton();
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// static なメンバ関数からのみインスタンス化できる．
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span> singleton &lt;span style="color:#f92672">=&lt;/span> Singleton&lt;span style="color:#f92672">::&lt;/span>GetInstance();
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details></content></item><item><title>Observable Member</title><link>https://sparrow-blue.github.io/blog/posts/design_pattern/observable_member/</link><pubDate>Sat, 17 Jun 2023 00:00:00 +0000</pubDate><guid>https://sparrow-blue.github.io/blog/posts/design_pattern/observable_member/</guid><description>このエントリの目指すところ C# ライクなイベントハンドリングを実装する．パターンの名称がわからないので，とりあえず Observable Member という名称で記載する． 調査</description><content>&lt;h2 id="このエントリの目指すところ">このエントリの目指すところ&lt;/h2>
&lt;p>C# ライクなイベントハンドリングを実装する．パターンの名称がわからないので，とりあえず Observable Member という名称で記載する．&lt;/p>
&lt;h2 id="調査">調査&lt;/h2>
&lt;h3 id="語られる像">語られる像&lt;/h3>
&lt;h3 id="整理">整理&lt;/h3>
&lt;h3 id="疑問">疑問&lt;/h3>
&lt;h2 id="要点">要点&lt;/h2>
&lt;h2 id="実例">実例&lt;/h2>
&lt;h3 id="設計">設計&lt;/h3>
&lt;h3 id="環境">環境&lt;/h3>
&lt;pre>&lt;code>$ cat /etc/os-release
PRETTY_NAME=&amp;quot;Ubuntu 22.04.2 LTS&amp;quot;
NAME=&amp;quot;Ubuntu&amp;quot;
VERSION_ID=&amp;quot;22.04&amp;quot;
VERSION=&amp;quot;22.04.2 LTS (Jammy Jellyfish)&amp;quot;
VERSION_CODENAME=jammy
ID=ubuntu
ID_LIKE=debian
HOME_URL=&amp;quot;https://www.ubuntu.com/&amp;quot;
SUPPORT_URL=&amp;quot;https://help.ubuntu.com/&amp;quot;
BUG_REPORT_URL=&amp;quot;https://bugs.launchpad.net/ubuntu/&amp;quot;
PRIVACY_POLICY_URL=&amp;quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&amp;quot;
UBUNTU_CODENAME=jammy
$ clang++ --version
Ubuntu clang version 14.0.0-1ubuntu1
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
&lt;/code>&lt;/pre>&lt;h3 id="実装">実装&lt;/h3>
&lt;p>
&lt;details >
&lt;summary>design_pattern/observable_member.cpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;observable_member/observable_member.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observable_member&lt;span style="color:#f92672">::&lt;/span>EventHandler;
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observable_member&lt;span style="color:#f92672">::&lt;/span>EventArgs;
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observable_member&lt;span style="color:#f92672">::&lt;/span>ObservableLine;
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">auto&lt;/span> observable_line &lt;span style="color:#f92672">=&lt;/span> ObservableLine(&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>);
observable_line.HeightChanged &lt;span style="color:#f92672">+=&lt;/span> [](&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span> sender, EventArgs&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> e) {
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Height Changed: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> e.old_value &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34; -&amp;gt; &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> e.new_value &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
};
observable_line.WidthChanged &lt;span style="color:#f92672">+=&lt;/span> [](&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span> sender, EventArgs&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> e) {
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Width Changed: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> e.old_value &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34; -&amp;gt; &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> e.new_value &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
};
&lt;span style="color:#75715e">// 値の変更をトリガにイベントを発火する．
&lt;/span>&lt;span style="color:#75715e">&lt;/span> observable_line.height(&lt;span style="color:#ae81ff">9&lt;/span>);
observable_line.width(&lt;span style="color:#ae81ff">0&lt;/span>);
observable_line.width(&lt;span style="color:#ae81ff">3&lt;/span>);
observable_line.height(&lt;span style="color:#ae81ff">7&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/observable_member/observable_member.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_OBSERVABLE_MEMBER_OBSERVABLE_MEMBER_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_OBSERVABLE_MEMBER_OBSERVABLE_MEMBER_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;ObservableDiagram.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;ObservableLine.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;EventHandler.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_OBSERVABLE_MEMBER_OBSERVABLE_MEMBER_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/observable_member/ObservableDiagram.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_OBSERVABLE_MEMBER_OBSERVABLEDIAGRAM_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_OBSERVABLE_MEMBER_OBSERVABLEDIAGRAM_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;EventHandler.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observable_member {
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ObservableDiagram&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
ObservableDiagram(&lt;span style="color:#66d9ef">int&lt;/span> width, &lt;span style="color:#66d9ef">int&lt;/span> height) &lt;span style="color:#f92672">:&lt;/span> width_(width), height_(height) {}
&lt;span style="color:#75715e">#pragma region width
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
EventHandler&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> WidthChanged;
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">width&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> width) {
&lt;span style="color:#66d9ef">auto&lt;/span> event_args &lt;span style="color:#f92672">=&lt;/span> EventArgs&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(width, width_);
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>width_ &lt;span style="color:#f92672">=&lt;/span> width;
WidthChanged.Invoke(&lt;span style="color:#66d9ef">this&lt;/span>, event_args);
}
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">width&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>width_; }
&lt;span style="color:#75715e">#pragma endregion
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#pragma region height
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
EventHandler&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> HeightChanged;
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">height&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> height) {
&lt;span style="color:#66d9ef">auto&lt;/span> event_args &lt;span style="color:#f92672">=&lt;/span> EventArgs&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(height, height_);
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>height_ &lt;span style="color:#f92672">=&lt;/span> height;
HeightChanged.Invoke(&lt;span style="color:#66d9ef">this&lt;/span>, event_args);
}
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">height&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>height_; }
&lt;span style="color:#75715e">#pragma endregion
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> width_;
&lt;span style="color:#66d9ef">int&lt;/span> height_;
};
} &lt;span style="color:#75715e">// namespace design_pattern::observable_member
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_OBSERVABLE_MEMBER_OBSERVABLEDIAGRAM_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/observable_member/ObservableLine.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_OBSERVABLE_MEMBER_OBSERVABLELINE_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_OBSERVABLE_MEMBER_OBSERVABLELINE_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;ObservableDiagram.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observable_member {
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ObservableLine&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> ObservableDiagram {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
ObservableLine(&lt;span style="color:#66d9ef">int&lt;/span> width, &lt;span style="color:#66d9ef">int&lt;/span> height) &lt;span style="color:#f92672">:&lt;/span> ObservableDiagram(width, height) {}
};
} &lt;span style="color:#75715e">// namespace design_pattern::observable_member
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_OBSERVABLE_MEMBER_OBSERVABLELINE_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/observable_member/EventHandler.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_OBSERVABLE_MEMBER_EVENTHANDLER_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_OBSERVABLE_MEMBER_EVENTHANDLER_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;functional&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observable_member {
&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EventArgs&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
EventArgs(T after, T before) &lt;span style="color:#f92672">:&lt;/span> new_value(after), old_value(before) {}
T new_value;
T old_value;
};
&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EventHandler&lt;/span> {
&lt;span style="color:#66d9ef">using&lt;/span> Event &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>function&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>, EventArgs&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span>)&lt;span style="color:#f92672">&amp;gt;&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
EventHandler() &lt;span style="color:#f92672">:&lt;/span> subscribers_(std&lt;span style="color:#f92672">::&lt;/span>make_unique&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Event&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>()) {}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Invoke&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span> sender, EventArgs&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> event_args) {
std&lt;span style="color:#f92672">::&lt;/span>for_each(subscribers_&lt;span style="color:#f92672">-&amp;gt;&lt;/span>begin(), subscribers_&lt;span style="color:#f92672">-&amp;gt;&lt;/span>end(),
[&lt;span style="color:#f92672">&amp;amp;&lt;/span>sender, &lt;span style="color:#f92672">&amp;amp;&lt;/span>event_args](Event&lt;span style="color:#f92672">&amp;amp;&lt;/span> subscriber) { subscriber(sender, event_args); });
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Subscribe&lt;/span>(Event event) { subscribers_&lt;span style="color:#f92672">-&amp;gt;&lt;/span>push_back(event); }
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>(Event&lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> event) { Subscribe(event); }
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Event&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> subscribers_;
};
} &lt;span style="color:#75715e">// namespace design_pattern::observable_member
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_OBSERVABLE_MEMBER_EVENTHANDLER_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;/p>
&lt;h3 id="実行結果">実行結果&lt;/h3>
&lt;pre>&lt;code>$ date &amp;amp;&amp;amp; ./content/build/design_pattern/observable_member
Sun Jun 18 00:29:26 JST 2023
Height Changed: 10 -&amp;gt; 9
Width Changed: 10 -&amp;gt; 0
Width Changed: 0 -&amp;gt; 3
Height Changed: 9 -&amp;gt; 7
&lt;/code>&lt;/pre></content></item><item><title>Observer Pattern</title><link>https://sparrow-blue.github.io/blog/posts/design_pattern/observer_pattern/</link><pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate><guid>https://sparrow-blue.github.io/blog/posts/design_pattern/observer_pattern/</guid><description>このエントリの目指すところ Observer Pattern は大きく以下の観点があると仮説をたて，それが妥当なのか，あるいは過不足があるのかを考える． データモデルとそれに</description><content>&lt;h2 id="このエントリの目指すところ">このエントリの目指すところ&lt;/h2>
&lt;p>Observer Pattern は大きく以下の観点があると仮説をたて，それが妥当なのか，あるいは過不足があるのかを考える．&lt;/p>
&lt;ol>
&lt;li>データモデルとそれに対する操作の参照関係を &lt;code>1..*&lt;/code> を実現しつつ操作同士を疎結合に保つ
&lt;ul>
&lt;li>Subject が Model だとすると，そのモデルが保持する値の変更に伴って処理を担う ViewModel や Controller が呼ばれなければならない．しかし Model のある値が変化したからといって，Model 自身はどんな処理をすべきかは知らない (知るべきではない)．&lt;/li>
&lt;li>したがって Model は「値が変化した」という事実を外部に公開し，それをトリガとして操作を受け付ける必要がある．これを実現する典型的な実装が Callback の登録である．&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>例にもれず実装はする．&lt;/p>
&lt;h2 id="調査">調査&lt;/h2>
&lt;h3 id="語られる像">語られる像&lt;/h3>
&lt;h3 id="整理">整理&lt;/h3>
&lt;h3 id="疑問">疑問&lt;/h3>
&lt;h2 id="要点">要点&lt;/h2>
&lt;h2 id="実例">実例&lt;/h2>
&lt;h3 id="設計">設計&lt;/h3>
&lt;h3 id="環境">環境&lt;/h3>
&lt;pre>&lt;code>$ cat /etc/os-release
PRETTY_NAME=&amp;quot;Ubuntu 22.04.2 LTS&amp;quot;
NAME=&amp;quot;Ubuntu&amp;quot;
VERSION_ID=&amp;quot;22.04&amp;quot;
VERSION=&amp;quot;22.04.2 LTS (Jammy Jellyfish)&amp;quot;
VERSION_CODENAME=jammy
ID=ubuntu
ID_LIKE=debian
HOME_URL=&amp;quot;https://www.ubuntu.com/&amp;quot;
SUPPORT_URL=&amp;quot;https://help.ubuntu.com/&amp;quot;
BUG_REPORT_URL=&amp;quot;https://bugs.launchpad.net/ubuntu/&amp;quot;
PRIVACY_POLICY_URL=&amp;quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&amp;quot;
UBUNTU_CODENAME=jammy
$ clang++ --version
Ubuntu clang version 14.0.0-1ubuntu1
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
$ scons --version
SCons by Steven Knight et al.:
SCons: v4.0.1.c289977f8b34786ab6c334311e232886da7e8df1, 2020-07-17 01:50:03, by bdbaddog on ProDog2020
SCons path: ['/usr/lib/python3/dist-packages/SCons']
Copyright (c) 2001 - 2020 The SCons Foundation
&lt;/code>&lt;/pre>&lt;h3 id="実装">実装&lt;/h3>
&lt;p>関連するファイル数が多いため，重要と思われるファイルをデフォルトで展開するようにした．&lt;/p>
&lt;p>
&lt;details open>
&lt;summary>design_pattern/observer_pattern.cpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;observer_pattern/observer_pattern.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observer_pattern&lt;span style="color:#f92672">::&lt;/span>Display;
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observer_pattern&lt;span style="color:#f92672">::&lt;/span>ObservableLine;
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observer_pattern&lt;span style="color:#f92672">::&lt;/span>ObservableTriangle;
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 画面上に図形を配置するようなケースを考える．
&lt;/span>&lt;span style="color:#75715e"> * ObservableDiagram がモデル，Display はモデルを利用するプレゼンテーションのイメージである．
&lt;/span>&lt;span style="color:#75715e"> * モデルの状態が変化すると Display に通知され，モデルが自動的に操作 (画面更新，ここでは標準出力) される．
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#75715e">// モデルを利用するオブジェクト (Observer)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span> display &lt;span style="color:#f92672">=&lt;/span> Display();
&lt;span style="color:#75715e">// 描画するモデルを生成する．
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span> line &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>ObservableLine&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;span style="color:#66d9ef">auto&lt;/span> triangle &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>ObservableTriangle&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;span style="color:#75715e">// 画面に図形を配置する．実態は Observer が Obsavable なオブジェクトの購読を始める．
&lt;/span>&lt;span style="color:#75715e">&lt;/span> display.Register(line);
display.Register(triangle);
&lt;span style="color:#75715e">// diagram の状態を変化させるごとに自動的に dump される．
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// モデルは自身がどう扱われるか気にしないが Observer が状態を監視しており，状態が変化した後になされる操作が
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 自動的に実行される．プログラマもモデルの状態を変化させるだけでよく，そのあと行われる処理は別の文脈で考えればよい．
&lt;/span>&lt;span style="color:#75715e">&lt;/span> line&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Resize(&lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
line&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Resize(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
line&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Resize(&lt;span style="color:#ae81ff">101&lt;/span>, &lt;span style="color:#ae81ff">101&lt;/span>);
triangle&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Resize(&lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
triangle&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Resize(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
triangle&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Resize(&lt;span style="color:#ae81ff">101&lt;/span>, &lt;span style="color:#ae81ff">101&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/observer_pattern/observer_pattern.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVER_PATTERN_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVER_PATTERN_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;observer_pattern/Display.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;observer_pattern/Observable.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;observer_pattern/ObservableDiagram.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;observer_pattern/ObservableLine.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;observer_pattern/ObservableTriangle.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;observer_pattern/Observer.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVER_PATTERN_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/observer_pattern/Display.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_OBSERVER_PATTERN_DISPLAY_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_OBSERVER_PATTERN_DISPLAY_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;../../join.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;Observable.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;ObservableDiagram.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;Observer.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observer_pattern {
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 簡易的にプレゼンテーションを表現する．モデルが変更されるたびに画面を更新する．
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Display&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Observer&lt;span style="color:#f92672">&amp;lt;&lt;/span>ObservableDiagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> OnPublished(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Observable&lt;span style="color:#f92672">&amp;gt;&lt;/span> sender) &lt;span style="color:#66d9ef">override&lt;/span> {
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>static_pointer_cast&lt;span style="color:#f92672">&amp;lt;&lt;/span>ObservableDiagram&lt;span style="color:#f92672">&amp;gt;&lt;/span>(sender)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
}
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>ObservableDiagram&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> objects_;
std&lt;span style="color:#f92672">::&lt;/span>string ToString() {
&lt;span style="color:#66d9ef">auto&lt;/span> messages &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
std&lt;span style="color:#f92672">::&lt;/span>transform(&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>objects_.begin(), &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>objects_.end(), std&lt;span style="color:#f92672">::&lt;/span>back_inserter(messages),
[](std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>ObservableDiagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>subject) { &lt;span style="color:#66d9ef">return&lt;/span> subject&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString(); });
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, messages);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Dump&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl; }
};
} &lt;span style="color:#75715e">// namespace design_pattern::observer_pattern
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_OBSERVER_PATTERN_DISPLAY_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details open>
&lt;summary>design_pattern/observer_pattern/Observable.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVABLE_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVABLE_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;functional&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observer_pattern {
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 監視可能なオブジェクトを表現する
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>enable_shared_from_this&lt;span style="color:#f92672">&amp;lt;&lt;/span>Observable&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> Subscribe(std&lt;span style="color:#f92672">::&lt;/span>function&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Observable&lt;span style="color:#f92672">&amp;gt;&lt;/span>)&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>func) { subscribers_.push_back(func); }
&lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> Notify() {
std&lt;span style="color:#f92672">::&lt;/span>for_each(&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>subscribers_.begin(), &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>subscribers_.end(),
[&lt;span style="color:#66d9ef">this&lt;/span>](&lt;span style="color:#66d9ef">auto&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>func) { func(shared_from_this()); });
}
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>function&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Observable&lt;span style="color:#f92672">&amp;gt;&lt;/span>)&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> subscribers_;
};
} &lt;span style="color:#75715e">// namespace design_pattern::observer_pattern
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVABLE_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/observer_pattern/ObservableDiagram.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVABLEDIAGRAM_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVABLEDIAGRAM_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;utility&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;../component/Diagram.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;Observable.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>component&lt;span style="color:#f92672">::&lt;/span>Diagram;
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observer_pattern {
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 監視可能な図形を表現する．
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ObservableDiagram&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Observable {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Resize(&lt;span style="color:#66d9ef">int&lt;/span> height, &lt;span style="color:#66d9ef">int&lt;/span> width) {
&lt;span style="color:#66d9ef">if&lt;/span> (diagram()&lt;span style="color:#f92672">-&amp;gt;&lt;/span>height() &lt;span style="color:#f92672">==&lt;/span> height &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> diagram()&lt;span style="color:#f92672">-&amp;gt;&lt;/span>width() &lt;span style="color:#f92672">==&lt;/span> width) &lt;span style="color:#66d9ef">return&lt;/span>;
diagram()&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Resize(height, width);
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Notify();
}
std&lt;span style="color:#f92672">::&lt;/span>string ToString() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">diagram&lt;/span>()&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString(); }
&lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">explicit&lt;/span> ObservableDiagram(std&lt;span style="color:#f92672">::&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram) &lt;span style="color:#f92672">:&lt;/span> diagram_(std&lt;span style="color:#f92672">::&lt;/span>move(diagram)) {}
&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>diagram() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_; }
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram_;
};
} &lt;span style="color:#75715e">// namespace design_pattern::observer_pattern
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVABLEDIAGRAM_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/observer_pattern/ObservableLine.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVABLELINE_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVABLELINE_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;../component/Line.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;observer_pattern/ObservableDiagram.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>component&lt;span style="color:#f92672">::&lt;/span>Line;
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observer_pattern {
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 監視可能な線分を表現する．
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ObservableLine&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> ObservableDiagram {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
ObservableLine() &lt;span style="color:#f92672">:&lt;/span> ObservableDiagram(std&lt;span style="color:#f92672">::&lt;/span>make_unique&lt;span style="color:#f92672">&amp;lt;&lt;/span>Line&lt;span style="color:#f92672">&amp;gt;&lt;/span>()) {}
};
} &lt;span style="color:#75715e">// namespace design_pattern::observer_pattern
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVABLELINE_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/observer_pattern/ObservableTriangle.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVABLETRIANGLE_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVABLETRIANGLE_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;../component/Triangle.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;ObservableDiagram.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>component&lt;span style="color:#f92672">::&lt;/span>Triangle;
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observer_pattern {
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 監視可能な三角形を表現する．
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ObservableTriangle&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> ObservableDiagram {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
ObservableTriangle() &lt;span style="color:#f92672">:&lt;/span> ObservableDiagram(std&lt;span style="color:#f92672">::&lt;/span>make_unique&lt;span style="color:#f92672">&amp;lt;&lt;/span>Triangle&lt;span style="color:#f92672">&amp;gt;&lt;/span>()) {}
};
} &lt;span style="color:#75715e">// namespace design_pattern::observer_pattern
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVABLETRIANGLE_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details open>
&lt;summary>design_pattern/observer_pattern/Observer.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVER_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVER_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>observer_pattern {
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 監視する責務を負う抽象クラスである．
&lt;/span>&lt;span style="color:#75715e"> * テンプレートの型は Observable を継承したクラスでなければならない．
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Observer&lt;/span> {
&lt;span style="color:#66d9ef">static_assert&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>is_base_of&lt;span style="color:#f92672">&amp;lt;&lt;/span>Observable, T&lt;span style="color:#f92672">&amp;gt;::&lt;/span>value, &lt;span style="color:#e6db74">&amp;#34;T must inherit from Observable&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#75715e">// NOLINTNEXTLINE(readability/inheritance)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Register(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> subject) &lt;span style="color:#66d9ef">final&lt;/span> {
subject&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Subscribe([&lt;span style="color:#66d9ef">this&lt;/span>](std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Observable&lt;span style="color:#f92672">&amp;gt;&lt;/span> sender) { &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>OnPublished(sender); });
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>objects_.push_back(subject);
}
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">OnPublished&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Observable&lt;span style="color:#f92672">&amp;gt;&lt;/span> sender) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#f92672">~&lt;/span>Observer() {}
&lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>weak_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> objects_; &lt;span style="color:#75715e">// Weak pointers to avoid circular references
&lt;/span>&lt;span style="color:#75715e">&lt;/span>};
} &lt;span style="color:#75715e">// namespace design_pattern::observer_pattern
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_OBSERVER_PATTERN_OBSERVER_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/component/Canvas.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_COMPONENT_CANVAS_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_COMPONENT_CANVAS_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iterator&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sstream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;../demangle.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;../join.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;Diagram.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>component {
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 図形が描画されるキャンバス
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Canvas&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> AddDiagram(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram) {
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_sets.push_back(std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>DiagramSet&lt;span style="color:#f92672">&amp;gt;&lt;/span>(diagram));
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Dump&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_sets.size() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString() &lt;span style="color:#f92672">:&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string(&lt;span style="color:#e6db74">&amp;#34;empty&amp;#34;&lt;/span>)) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl; }
std&lt;span style="color:#f92672">::&lt;/span>string ToString() {
&lt;span style="color:#66d9ef">auto&lt;/span> messages &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
std&lt;span style="color:#f92672">::&lt;/span>transform(diagram_sets.begin(), diagram_sets.end(), std&lt;span style="color:#f92672">::&lt;/span>back_inserter(messages),
[](std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>DiagramSet&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram_set) { &lt;span style="color:#66d9ef">return&lt;/span> diagram_set&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString(); });
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, messages);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Move&lt;/span>(size_t index, &lt;span style="color:#66d9ef">int&lt;/span> offset_x, &lt;span style="color:#66d9ef">int&lt;/span> offset_y) { &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_sets.at(index)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Move(offset_x, offset_y); }
std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> diagrams() {
&lt;span style="color:#66d9ef">auto&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>();
std&lt;span style="color:#f92672">::&lt;/span>transform(&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_sets.begin(), &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_sets.end(), std&lt;span style="color:#f92672">::&lt;/span>back_inserter(result),
[](std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>DiagramSet&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram_set_) { &lt;span style="color:#66d9ef">return&lt;/span> diagram_set_&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram(); });
&lt;span style="color:#66d9ef">return&lt;/span> result;
}
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Canvas が管理する Diagram のそれぞれがどの位置に存在するかを管理する
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DiagramSet&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">explicit&lt;/span> DiagramSet(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram, &lt;span style="color:#66d9ef">int&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span> y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">:&lt;/span> diagram_(diagram), x_(x), y_(y) {}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Move&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> offset_x, &lt;span style="color:#66d9ef">int&lt;/span> offset_y) {
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>x_ &lt;span style="color:#f92672">+=&lt;/span> offset_x;
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>y_ &lt;span style="color:#f92672">+=&lt;/span> offset_y;
}
std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_; }
std&lt;span style="color:#f92672">::&lt;/span>string ToString() {
&lt;span style="color:#66d9ef">char&lt;/span> buffer[&lt;span style="color:#ae81ff">0xFF&lt;/span>];
sprintf(buffer, &lt;span style="color:#e6db74">&amp;#34;x: %d, y: %d - %s&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>x_, &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>y_, &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString().c_str());
&lt;span style="color:#66d9ef">return&lt;/span> buffer;
}
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram_;
&lt;span style="color:#66d9ef">int&lt;/span> x_;
&lt;span style="color:#66d9ef">int&lt;/span> y_;
};
std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>DiagramSet&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> diagram_sets;
};
} &lt;span style="color:#75715e">// namespace design_pattern::component
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_COMPONENT_CANVAS_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/component/Diagram.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_COMPONENT_DIAGRAM_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_COMPONENT_DIAGRAM_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sstream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;../demangle.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>component {
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 描画される図形の抽象クラス
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Diagram&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
Diagram() &lt;span style="color:#f92672">:&lt;/span> height_(&lt;span style="color:#ae81ff">0&lt;/span>), width_(&lt;span style="color:#ae81ff">0&lt;/span>) {}
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#f92672">~&lt;/span>Diagram() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 自身の型と大きさを文字列で表現する．
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>string ToString() {
std&lt;span style="color:#f92672">::&lt;/span>stringstream ss;
ss &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> Demangle(&lt;span style="color:#66d9ef">typeid&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>)) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;(&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>height() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>width() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> ss.str();
}
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 自身の高さを返す．
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">height&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>height_; }
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 自身の幅を返す．
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">width&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>width_; }
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * リサイズする．
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Resize&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> height, &lt;span style="color:#66d9ef">int&lt;/span> width) {
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>height_ &lt;span style="color:#f92672">=&lt;/span> height;
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>width_ &lt;span style="color:#f92672">=&lt;/span> width;
}
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> height_;
&lt;span style="color:#66d9ef">int&lt;/span> width_;
};
Diagram&lt;span style="color:#f92672">::~&lt;/span>Diagram() {}
} &lt;span style="color:#75715e">// namespace design_pattern::component
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_COMPONENT_DIAGRAM_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/component/Line.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_COMPONENT_LINE_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_COMPONENT_LINE_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;Diagram.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>component {
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 線分を表現するクラス
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Line&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Diagram {};
} &lt;span style="color:#75715e">// namespace design_pattern::component
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_COMPONENT_LINE_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/component/Triangle.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_COMPONENT_TRIANGLE_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_COMPONENT_TRIANGLE_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;Diagram.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>component {
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 三角形を表現するクラス
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Triangle&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Diagram {};
} &lt;span style="color:#75715e">// namespace design_pattern::component
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_COMPONENT_TRIANGLE_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>demangle.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DEMANGLE_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DEMANGLE_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cxxabi.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * @brief 型名をデマングル化する．
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @param id デマングル化する型のtype_infoオブジェクト
&lt;/span>&lt;span style="color:#75715e"> * @return std::string デマングル化された型名を表す文字列
&lt;/span>&lt;span style="color:#75715e"> * @throws std::exception デマングル化が失敗した場合に投げられます
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @details
&lt;/span>&lt;span style="color:#75715e"> * gcc および clang コンパイラでマングル化された型名をデマングル化します．
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>string Demangle(&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>type_info&lt;span style="color:#f92672">&amp;amp;&lt;/span> id) {
&lt;span style="color:#66d9ef">int&lt;/span> status;
&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> demangled_name &lt;span style="color:#f92672">=&lt;/span> abi&lt;span style="color:#f92672">::&lt;/span>__cxa_demangle(id.name(), &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>status);
&lt;span style="color:#66d9ef">if&lt;/span> (status &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;span style="color:#66d9ef">auto&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string(demangled_name);
free(demangled_name);
&lt;span style="color:#66d9ef">return&lt;/span> result;
}
&lt;span style="color:#66d9ef">throw&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>exception();
}
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DEMANGLE_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>join.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef JOIN_HPP_
&lt;/span>&lt;span style="color:#75715e">#define JOIN_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;numeric&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * @brief 文字列の配列を指定したデリミタで結合する．
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @param delimitor 文字列を連結する際の区切り文字
&lt;/span>&lt;span style="color:#75715e"> * @param messages 連結する文字列の配列
&lt;/span>&lt;span style="color:#75715e"> * @return std::string 連結された文字列
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @details
&lt;/span>&lt;span style="color:#75715e"> * 指定したデリミタで文字列の配列を連結する．
&lt;/span>&lt;span style="color:#75715e"> * デリミタに &amp;#34;,&amp;#34; を指定し，文字列の配列として {&amp;#34;Hello&amp;#34;, * &amp;#34;World&amp;#34;}
&lt;/span>&lt;span style="color:#75715e"> * を指定した場合，&amp;#34;Hello,World&amp;#34;を返します．
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>string Join(&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string &lt;span style="color:#f92672">&amp;amp;&lt;/span>delimitor,
&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>messages) {
&lt;span style="color:#66d9ef">return&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>accumulate(
std&lt;span style="color:#f92672">::&lt;/span>next(messages.begin()), messages.end(), messages[&lt;span style="color:#ae81ff">0&lt;/span>],
[delimitor](std&lt;span style="color:#f92672">::&lt;/span>string a, std&lt;span style="color:#f92672">::&lt;/span>string b) { &lt;span style="color:#66d9ef">return&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> delimitor &lt;span style="color:#f92672">+&lt;/span> b; });
}
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// JOIN_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;/p>
&lt;h3 id="実行結果">実行結果&lt;/h3>
&lt;pre>&lt;code>$ ./content/build/design_pattern/observer_pattern
design_pattern::component::Line (100,100)
design_pattern::component::Line (0,0)
design_pattern::component::Line (101,101)
design_pattern::component::Triangle (100,100)
design_pattern::component::Triangle (0,0)
design_pattern::component::Triangle (101,101)
&lt;/code>&lt;/pre></content></item><item><title>Command Pattern</title><link>https://sparrow-blue.github.io/blog/posts/design_pattern/command_pattern/</link><pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate><guid>https://sparrow-blue.github.io/blog/posts/design_pattern/command_pattern/</guid><description>このエントリの目指すところ 以下の観点で調査/検討する． どのようなシーンで使えるのか なぜそのシーンで使えるのか 必要に応じてプログラムに起こす．</description><content>&lt;h2 id="このエントリの目指すところ">このエントリの目指すところ&lt;/h2>
&lt;p>以下の観点で調査/検討する．&lt;/p>
&lt;ol>
&lt;li>どのようなシーンで使えるのか&lt;/li>
&lt;li>なぜそのシーンで使えるのか&lt;/li>
&lt;/ol>
&lt;p>必要に応じてプログラムに起こす．&lt;/p>
&lt;h2 id="調査">調査&lt;/h2>
&lt;h3 id="語られる像">語られる像&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://ja.wikipedia.org/wiki/Command_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Wikipedia - Command パターン&lt;/a>
&lt;blockquote>
&lt;p>リクエストのために必要な手続きとデータをCommandオブジェクトとしてカプセル化した上で取り回し[1]、必要に応じてExecute（実行）するパターンである。オブジェクトであることを生かして命令のキューイングやロギング、Undo等が可能になり[2]、Executeを分離したことで手続きと実行を疎結合にできる。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://www.techscore.com/tech/DesignPattern/Command">TECHSCORE - 22. Commandパターン&lt;/a>
&lt;blockquote>
&lt;p>あるオブジェクトに対して要求を送るということは、そのオブジェクトのメソッドを呼び出すことと同じです。 そして、メソッドにどのような引数を渡すか、ということによって要求の内容は表現されます。さまざまな要求を送ろうとすると、引数の数や種類を増やさなければなりませんが、 それには限界があります。そこで要求自体をオブジェクトにしてしまい、そのオブジェクトを引数に渡すようにします。それがCommandパターンです。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://zenn.dev/morinokami/books/learning-patterns-1/viewer/command-pattern">フロントエンドのデザインパターン - コマンドパターン&lt;/a>
&lt;blockquote>
&lt;p>コマンドパターン (command pattern) を用いると、あるタスクを実行するオブジェクトと、そのメソッドを呼び出すオブジェクトを切り離すことができことができます。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://www.itsenka.com/contents/development/designpattern/command.html">IT専科 - Command パターン&lt;/a>
&lt;blockquote>
&lt;p>「Command」という英単語は、「命令」を意味します。
このパターンでは、1つもしくは複数の命令を1つのオブジェクトで表現(命令の詳細処理をカプセル化)します。また、命令をオブジェクトとして管理するため、その命令の履歴管理、UNDO(取消し)機能の実装等が容易に行えます。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h3 id="整理">整理&lt;/h3>
&lt;ol>
&lt;li>Command Pattern の典型的な用例として Undo/Redo が挙げられる&lt;/li>
&lt;li>手続き一式を隠ぺいし，オブジェクトとして取り扱えるようにする&lt;/li>
&lt;li>手続きがオブジェクトとして扱われることで，キューイングや呼び出し履歴の記録が可能になる&lt;/li>
&lt;li>ある手続きを定義したとして，それを実行する責務と分離される&lt;/li>
&lt;/ol>
&lt;h3 id="疑問">疑問&lt;/h3>
&lt;ol>
&lt;li>Redo はともかく Undo をどのように実現するのか
&lt;ul>
&lt;li>Command に対する入力と出力を保持しておくということか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="要点">要点&lt;/h2>
&lt;p>Command Pattern の要点は大きく以下 2 つであると考える．&lt;/p>
&lt;ol>
&lt;li>一連の処理をオブジェクトに隠蔽できる&lt;/li>
&lt;li>処理の定義とその実行をそれぞれ別の責務として扱える&lt;/li>
&lt;/ol>
&lt;p>この結果，Command を実行する責務を負う Invoker で Execute したという事実が保持でき，条件さえそろえば実行履歴やその順序を保持できる．実行の順序が保持できていれば工夫次第で Redo/Undo も実現できる．&lt;/p>
&lt;p>一連の処理をオブジェクトにすることを目的と据えるのであれば Redu/Undo は結果的に導かれるだけであって，例えば非同期に実行するタスクを積む一種の Producer-Consumer Pattern のベースとも考えられる．&lt;/p>
&lt;h2 id="実例">実例&lt;/h2>
&lt;p>キャンバスに図形を描くプログラムを考える．Canvas に対して Line や Triangle などの図形を配置する Command，図形を Move したり Resize したりする Command も定義し，これらの実行履歴を保持する Invoker を定義する．&lt;/p>
&lt;h3 id="設計">設計&lt;/h3>
&lt;h3 id="環境">環境&lt;/h3>
&lt;pre>&lt;code>$ cat /etc/os-release
PRETTY_NAME=&amp;quot;Ubuntu 22.04.2 LTS&amp;quot;
NAME=&amp;quot;Ubuntu&amp;quot;
VERSION_ID=&amp;quot;22.04&amp;quot;
VERSION=&amp;quot;22.04.2 LTS (Jammy Jellyfish)&amp;quot;
VERSION_CODENAME=jammy
ID=ubuntu
ID_LIKE=debian
HOME_URL=&amp;quot;https://www.ubuntu.com/&amp;quot;
SUPPORT_URL=&amp;quot;https://help.ubuntu.com/&amp;quot;
BUG_REPORT_URL=&amp;quot;https://bugs.launchpad.net/ubuntu/&amp;quot;
PRIVACY_POLICY_URL=&amp;quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&amp;quot;
UBUNTU_CODENAME=jammy
$ clang++ --version
Ubuntu clang version 14.0.0-1ubuntu1
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
&lt;/code>&lt;/pre>&lt;h3 id="実装">実装&lt;/h3>
&lt;p>
&lt;details >
&lt;summary>design_pattern/command_pattern.cpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;command_pattern/command_pattern.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>Canvas;
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>Command;
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>CreateLineDiagramCommand;
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>CreateTriangleDiagramCommand;
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>Executor;
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>MoveDiagramCommand;
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>ResizeDiagramCommand;
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">auto&lt;/span> canvas &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>Canvas&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;span style="color:#66d9ef">auto&lt;/span> execution_queue &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>queue&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Command&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>();
&lt;span style="color:#66d9ef">auto&lt;/span> execution_history &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>list&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Command&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>();
&lt;span style="color:#66d9ef">auto&lt;/span> executor &lt;span style="color:#f92672">=&lt;/span> Executor();
&lt;span style="color:#66d9ef">auto&lt;/span> dumper &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#f92672">&amp;amp;&lt;/span>canvas, &lt;span style="color:#f92672">&amp;amp;&lt;/span>executor]() {
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;# state&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;## canvas&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
canvas&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Dump();
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;## executor&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
executor.DumpExecutionHistory();
};
&lt;span style="color:#75715e">// 初期状態の出力
&lt;/span>&lt;span style="color:#75715e">&lt;/span> dumper();
{ &lt;span style="color:#75715e">// 図形をキャンバスに追加する
&lt;/span>&lt;span style="color:#75715e">&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;# add diagrams&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
executor &lt;span style="color:#f92672">+=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>CreateLineDiagramCommand&lt;span style="color:#f92672">&amp;gt;&lt;/span>(canvas);
executor &lt;span style="color:#f92672">+=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>CreateTriangleDiagramCommand&lt;span style="color:#f92672">&amp;gt;&lt;/span>(canvas);
}
dumper();
{ &lt;span style="color:#75715e">// 諸図形に対して操作する
&lt;/span>&lt;span style="color:#75715e">&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;# operate diagrams&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
executor &lt;span style="color:#f92672">+=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>ResizeDiagramCommand&lt;span style="color:#f92672">&amp;gt;&lt;/span>(canvas, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">200&lt;/span>);
executor &lt;span style="color:#f92672">+=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>MoveDiagramCommand&lt;span style="color:#f92672">&amp;gt;&lt;/span>(canvas, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">250&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>);
executor &lt;span style="color:#f92672">+=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>MoveDiagramCommand&lt;span style="color:#f92672">&amp;gt;&lt;/span>(canvas, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
}
dumper();
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>design_pattern/command_pattern/command_pattern.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_COMMAND_PATTERN_COMMAND_PATTERN_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_COMMAND_PATTERN_COMMAND_PATTERN_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iterator&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;list&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;queue&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sstream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;../demangle.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;../join.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;component/Canvas.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;component/Diagram.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;component/Line.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;component/Triangle.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>component&lt;span style="color:#f92672">::&lt;/span>Diagram;
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>component&lt;span style="color:#f92672">::&lt;/span>Line;
&lt;span style="color:#66d9ef">using&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>component&lt;span style="color:#f92672">::&lt;/span>Triangle;
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern {
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 図形が描画されるキャンバス
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Canvas&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> AddDiagram(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram) {
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_sets.push_back(std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>DiagramSet&lt;span style="color:#f92672">&amp;gt;&lt;/span>(diagram));
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Dump&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_sets.size() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString() &lt;span style="color:#f92672">:&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string(&lt;span style="color:#e6db74">&amp;#34;empty&amp;#34;&lt;/span>)) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl; }
std&lt;span style="color:#f92672">::&lt;/span>string ToString() {
&lt;span style="color:#66d9ef">auto&lt;/span> messages &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
std&lt;span style="color:#f92672">::&lt;/span>transform(diagram_sets.begin(), diagram_sets.end(), std&lt;span style="color:#f92672">::&lt;/span>back_inserter(messages),
[](std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>DiagramSet&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram_set) { &lt;span style="color:#66d9ef">return&lt;/span> diagram_set&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString(); });
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, messages);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Move&lt;/span>(size_t index, &lt;span style="color:#66d9ef">int&lt;/span> offset_x, &lt;span style="color:#66d9ef">int&lt;/span> offset_y) { &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_sets.at(index)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Move(offset_x, offset_y); }
std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> diagrams() {
&lt;span style="color:#66d9ef">auto&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>();
std&lt;span style="color:#f92672">::&lt;/span>transform(&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_sets.begin(), &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_sets.end(), std&lt;span style="color:#f92672">::&lt;/span>back_inserter(result),
[](std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>DiagramSet&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram_set_) { &lt;span style="color:#66d9ef">return&lt;/span> diagram_set_&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram(); });
&lt;span style="color:#66d9ef">return&lt;/span> result;
}
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Canvas が管理する Diagram のそれぞれがどの位置に存在するかを管理する
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DiagramSet&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">explicit&lt;/span> DiagramSet(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram, &lt;span style="color:#66d9ef">int&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span> y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">:&lt;/span> diagram_(diagram), x_(x), y_(y) {}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Move&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> offset_x, &lt;span style="color:#66d9ef">int&lt;/span> offset_y) {
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>x_ &lt;span style="color:#f92672">+=&lt;/span> offset_x;
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>y_ &lt;span style="color:#f92672">+=&lt;/span> offset_y;
}
std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_; }
std&lt;span style="color:#f92672">::&lt;/span>string ToString() {
&lt;span style="color:#66d9ef">char&lt;/span> buffer[&lt;span style="color:#ae81ff">0xFF&lt;/span>];
sprintf(buffer, &lt;span style="color:#e6db74">&amp;#34;x: %d, y: %d - %s&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>x_, &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>y_, &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagram_&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString().c_str());
&lt;span style="color:#66d9ef">return&lt;/span> buffer;
}
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram_;
&lt;span style="color:#66d9ef">int&lt;/span> x_;
&lt;span style="color:#66d9ef">int&lt;/span> y_;
};
std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>DiagramSet&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> diagram_sets;
};
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * コマンドの抽象クラス
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Command&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">explicit&lt;/span> Command(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>Canvas&lt;span style="color:#f92672">&amp;gt;&lt;/span> canvas) &lt;span style="color:#f92672">:&lt;/span> canvas_(canvas) {}
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Execute&lt;/span>() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string ToString() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Canvas&lt;span style="color:#f92672">&amp;gt;&lt;/span> canvas_;
};
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * 線分の生成を担うコマンド
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CreateLineDiagramCommand&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Command {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">explicit&lt;/span> CreateLineDiagramCommand(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>Canvas&lt;span style="color:#f92672">&amp;gt;&lt;/span> canvas)
&lt;span style="color:#f92672">:&lt;/span> Command(canvas) {}
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Execute&lt;/span>() {
&lt;span style="color:#66d9ef">auto&lt;/span> new_diagram &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>Line&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>canvas_&lt;span style="color:#f92672">-&amp;gt;&lt;/span>AddDiagram(new_diagram);
}
&lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string ToString() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Demangle&lt;/span>(&lt;span style="color:#66d9ef">typeid&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>)); }
};
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * 三角形の生成を担うコマンド
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CreateTriangleDiagramCommand&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Command {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">explicit&lt;/span> CreateTriangleDiagramCommand(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>Canvas&lt;span style="color:#f92672">&amp;gt;&lt;/span> canvas_)
&lt;span style="color:#f92672">:&lt;/span> Command(canvas_) {}
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Execute&lt;/span>() {
&lt;span style="color:#66d9ef">auto&lt;/span> new_diagram &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>Triangle&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>canvas_&lt;span style="color:#f92672">-&amp;gt;&lt;/span>AddDiagram(new_diagram);
}
&lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string ToString() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Demangle&lt;/span>(&lt;span style="color:#66d9ef">typeid&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>)); }
};
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * 図形の移動を担うコマンド
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MoveDiagramCommand&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Command {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
MoveDiagramCommand(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>Canvas&lt;span style="color:#f92672">&amp;gt;&lt;/span> canvas_, size_t index, &lt;span style="color:#66d9ef">int&lt;/span> offset_x,
&lt;span style="color:#66d9ef">int&lt;/span> offset_y)
&lt;span style="color:#f92672">:&lt;/span> Command(canvas_), index_(index), offset_x_(offset_x), offset_y_(offset_y) {}
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Execute&lt;/span>() { canvas_&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Move(&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>index_, &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>offset_x_, &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>offset_y_); }
&lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string ToString() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Demangle&lt;/span>(&lt;span style="color:#66d9ef">typeid&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>)); }
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
size_t index_;
&lt;span style="color:#66d9ef">int&lt;/span> offset_x_;
&lt;span style="color:#66d9ef">int&lt;/span> offset_y_;
};
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * 図形のリサイズを担うコマンド
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ResizeDiagramCommand&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Command {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
ResizeDiagramCommand(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>Canvas&lt;span style="color:#f92672">&amp;gt;&lt;/span> canvas_, size_t index,
&lt;span style="color:#66d9ef">int&lt;/span> target_height, &lt;span style="color:#66d9ef">int&lt;/span> target_width)
&lt;span style="color:#f92672">:&lt;/span> Command(canvas_), index_(index), height_(target_height), width_(target_width) {}
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Execute&lt;/span>() { &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>canvas_&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagrams().at(index_)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Resize(&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>target_height(), &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>target_width()); }
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">target_height&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>height_; }
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">target_width&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>width_; }
&lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string ToString() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Demangle&lt;/span>(&lt;span style="color:#66d9ef">typeid&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>)); }
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
size_t index_;
&lt;span style="color:#66d9ef">int&lt;/span> height_;
&lt;span style="color:#66d9ef">int&lt;/span> width_;
};
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * コマンドの実行し，その履歴を保持する．
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Executor&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Command&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> execution_history_;
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
Executor &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Command&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>command) {
command&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Execute();
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>execution_history_.push_back(command);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>;
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">DumpExecutionHistory&lt;/span>() {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>execution_history_.size()) {
std&lt;span style="color:#f92672">::&lt;/span>for_each(&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>execution_history_.begin(), &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>execution_history_.end(), [idx &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>](&lt;span style="color:#66d9ef">auto&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>command) &lt;span style="color:#66d9ef">mutable&lt;/span> {
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> idx&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> command&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
});
} &lt;span style="color:#66d9ef">else&lt;/span> {
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;empty&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
}
}
};
} &lt;span style="color:#75715e">// namespace design_pattern::command_pattern
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DESIGN_PATTERN_COMMAND_PATTERN_COMMAND_PATTERN_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>demangle.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef DEMANGLE_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DEMANGLE_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cxxabi.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * @brief 型名をデマングル化する．
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @param id デマングル化する型のtype_infoオブジェクト
&lt;/span>&lt;span style="color:#75715e"> * @return std::string デマングル化された型名を表す文字列
&lt;/span>&lt;span style="color:#75715e"> * @throws std::exception デマングル化が失敗した場合に投げられます
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @details
&lt;/span>&lt;span style="color:#75715e"> * gcc および clang コンパイラでマングル化された型名をデマングル化します．
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>string Demangle(&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>type_info&lt;span style="color:#f92672">&amp;amp;&lt;/span> id) {
&lt;span style="color:#66d9ef">int&lt;/span> status;
&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> demangled_name &lt;span style="color:#f92672">=&lt;/span> abi&lt;span style="color:#f92672">::&lt;/span>__cxa_demangle(id.name(), &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>status);
&lt;span style="color:#66d9ef">if&lt;/span> (status &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;span style="color:#66d9ef">auto&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string(demangled_name);
free(demangled_name);
&lt;span style="color:#66d9ef">return&lt;/span> result;
}
&lt;span style="color:#66d9ef">throw&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>exception();
}
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// DEMANGLE_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;details >
&lt;summary>join.hpp&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// Copyright (c) 2023, Kumazawa (sparrow-blue)
&lt;/span>&lt;span style="color:#75715e">// This source code is licensed under the BSD 3-Clause License.
&lt;/span>&lt;span style="color:#75715e">// See https://github.com/sparrow-blue/blog/blob/main/LICENSE for details.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#ifndef JOIN_HPP_
&lt;/span>&lt;span style="color:#75715e">#define JOIN_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;numeric&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * @brief 文字列の配列を指定したデリミタで結合する．
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @param delimitor 文字列を連結する際の区切り文字
&lt;/span>&lt;span style="color:#75715e"> * @param messages 連結する文字列の配列
&lt;/span>&lt;span style="color:#75715e"> * @return std::string 連結された文字列
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @details
&lt;/span>&lt;span style="color:#75715e"> * 指定したデリミタで文字列の配列を連結する．
&lt;/span>&lt;span style="color:#75715e"> * デリミタに &amp;#34;,&amp;#34; を指定し，文字列の配列として {&amp;#34;Hello&amp;#34;, * &amp;#34;World&amp;#34;}
&lt;/span>&lt;span style="color:#75715e"> * を指定した場合，&amp;#34;Hello,World&amp;#34;を返します．
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>string Join(&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string &lt;span style="color:#f92672">&amp;amp;&lt;/span>delimitor,
&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>messages) {
&lt;span style="color:#66d9ef">return&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>accumulate(
std&lt;span style="color:#f92672">::&lt;/span>next(messages.begin()), messages.end(), messages[&lt;span style="color:#ae81ff">0&lt;/span>],
[delimitor](std&lt;span style="color:#f92672">::&lt;/span>string a, std&lt;span style="color:#f92672">::&lt;/span>string b) { &lt;span style="color:#66d9ef">return&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> delimitor &lt;span style="color:#f92672">+&lt;/span> b; });
}
&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">// JOIN_HPP_
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;/p>
&lt;h3 id="実行結果">実行結果&lt;/h3>
&lt;pre>&lt;code>$ date; clang++ src/command_pattern.cpp -o command_pattern.out &amp;amp;&amp;amp; ./command_pattern.out
Thu Jun 15 01:50:06 JST 2023
# state
## canvas
empty
## executer
empty
# add diagrams
# state
## canvas
x: 0, y: 0 - design_pattern::command_pattern::Line (0,5)
x: 0, y: 0 - design_pattern::command_pattern::Triangle (5,10)
## executer
0: design_pattern::command_pattern::CreateLineDiagramCommand
1: design_pattern::command_pattern::CreateTriangleDiagramCommand
# operate diagrams
# state
## canvas
x: 100, y: 500 - design_pattern::command_pattern::Line (0,200)
x: 250, y: 50 - design_pattern::command_pattern::Triangle (5,10)
## executer
0: design_pattern::command_pattern::CreateLineDiagramCommand
1: design_pattern::command_pattern::CreateTriangleDiagramCommand
2: design_pattern::command_pattern::ResizeDiagramCommand
3: design_pattern::command_pattern::MoveDiagramCommand
4: design_pattern::command_pattern::MoveDiagramCommand
&lt;/code>&lt;/pre></content></item><item><title>ブログを書くことにした</title><link>https://sparrow-blue.github.io/blog/posts/2023-06-11/</link><pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate><guid>https://sparrow-blue.github.io/blog/posts/2023-06-11/</guid><description>何年ぶりだろうか．学生の時分，そのころプレイしていた MMORPG に関するブログを書いていた記憶がある．それが最後に書いたブログだと思われるが，だとする</description><content>&lt;p>何年ぶりだろうか．学生の時分，そのころプレイしていた MMORPG に関するブログを書いていた記憶がある．それが最後に書いたブログだと思われるが，だとするとずいぶん昔の話である．&lt;/p>
&lt;p>これまでも気になったことを Twitter に書いてみたりしていたのだが，どうしても複数の投稿をまたぐ長文になってしまうし，そんなものはフォロワにとって興味のないものというのは想像の易く投稿に躊躇することがしばしばあった． とはいえ，考えたことを記録しておきたい場合もある．何らかの形で公開しようと試みることで考えが整理されることもあるだろう．&lt;/p>
&lt;p>そんな折に Hugo を使うと GitHub Pages でブログが作れるという話を風の便りに聞き，試してみることにした．自分の好きなエディタで記事が書けるというのは助かる．&lt;/p>
&lt;p>おそらく設計や開発の話になると思う．いわゆる技術ブログというものになるだろう．もしかしたら，はてなブログ，Qiita や Zenn がいいのかもしれない．しかし，もともとが Twitter の鍵垢で投稿しようとしていた内容を書く環境を作る，という目的だったことを考えると積極的に他者の目に触れる必要はない．積極的な理由ではないが GitHub Pages + Hugo でブログを書いてみようと思う．&lt;/p></content></item></channel></rss>