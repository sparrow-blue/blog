<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design_pattern on Design and Implementation</title><link>https://sparrow-blue.github.io/blog/tags/design_pattern/</link><description>Recent content in design_pattern on Design and Implementation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://sparrow-blue.github.io/blog/tags/design_pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Command Pattern</title><link>https://sparrow-blue.github.io/blog/posts/design_pattern/command_pattern/</link><pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate><guid>https://sparrow-blue.github.io/blog/posts/design_pattern/command_pattern/</guid><description>このエントリの目指すところ 以下の観点で調査/検討する． どのようなシーンで使えるのか なぜそのシーンで使えるのか 必要に応じてプログラムに起こす．</description><content>&lt;h2 id="このエントリの目指すところ">このエントリの目指すところ&lt;/h2>
&lt;p>以下の観点で調査/検討する．&lt;/p>
&lt;ol>
&lt;li>どのようなシーンで使えるのか&lt;/li>
&lt;li>なぜそのシーンで使えるのか&lt;/li>
&lt;/ol>
&lt;p>必要に応じてプログラムに起こす．&lt;/p>
&lt;h2 id="調査">調査&lt;/h2>
&lt;h3 id="語られる像">語られる像&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://ja.wikipedia.org/wiki/Command_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Wikipedia - Command パターン&lt;/a>
&lt;blockquote>
&lt;p>リクエストのために必要な手続きとデータをCommandオブジェクトとしてカプセル化した上で取り回し[1]、必要に応じてExecute（実行）するパターンである。オブジェクトであることを生かして命令のキューイングやロギング、Undo等が可能になり[2]、Executeを分離したことで手続きと実行を疎結合にできる。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://www.techscore.com/tech/DesignPattern/Command">TECHSCORE - 22. Commandパターン&lt;/a>
&lt;blockquote>
&lt;p>あるオブジェクトに対して要求を送るということは、そのオブジェクトのメソッドを呼び出すことと同じです。 そして、メソッドにどのような引数を渡すか、ということによって要求の内容は表現されます。さまざまな要求を送ろうとすると、引数の数や種類を増やさなければなりませんが、 それには限界があります。そこで要求自体をオブジェクトにしてしまい、そのオブジェクトを引数に渡すようにします。それがCommandパターンです。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://zenn.dev/morinokami/books/learning-patterns-1/viewer/command-pattern">フロントエンドのデザインパターン - コマンドパターン&lt;/a>
&lt;blockquote>
&lt;p>コマンドパターン (command pattern) を用いると、あるタスクを実行するオブジェクトと、そのメソッドを呼び出すオブジェクトを切り離すことができことができます。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://www.itsenka.com/contents/development/designpattern/command.html">IT専科 - Command パターン&lt;/a>
&lt;blockquote>
&lt;p>「Command」という英単語は、「命令」を意味します。
このパターンでは、1つもしくは複数の命令を1つのオブジェクトで表現(命令の詳細処理をカプセル化)します。また、命令をオブジェクトとして管理するため、その命令の履歴管理、UNDO(取消し)機能の実装等が容易に行えます。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h3 id="整理">整理&lt;/h3>
&lt;ol>
&lt;li>Command Pattern の典型的な用例として Undo/Redo が挙げられる&lt;/li>
&lt;li>手続き一式を隠ぺいし，オブジェクトとして取り扱えるようにする&lt;/li>
&lt;li>手続きがオブジェクトとして扱われることで，キューイングや呼び出し履歴の記録が可能になる&lt;/li>
&lt;li>ある手続きを定義したとして，それを実行する責務と分離される&lt;/li>
&lt;/ol>
&lt;h3 id="疑問">疑問&lt;/h3>
&lt;ol>
&lt;li>Redo はともかく Undo をどのように実現するのか
&lt;ul>
&lt;li>Command に対する入力と出力を保持しておくということか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="要点">要点&lt;/h2>
&lt;h2 id="検討">検討&lt;/h2>
&lt;h3 id="どのようなシーンで使えるのか">どのようなシーンで使えるのか&lt;/h3>
&lt;h3 id="なぜそのシーンで使えるのか">なぜそのシーンで使えるのか&lt;/h3>
&lt;h2 id="実例">実例&lt;/h2>
&lt;h3 id="設計">設計&lt;/h3>
&lt;h3 id="環境">環境&lt;/h3>
&lt;pre>&lt;code>$ clang++ --version
Ubuntu clang version 14.0.0-1ubuntu1
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
&lt;/code>&lt;/pre>&lt;h3 id="実装">実装&lt;/h3>
&lt;h2 id="hahahugoshortcode-s0-hbhb">
&lt;pre>src/command_pattern.cpp&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;command_pattern.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern;
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">auto&lt;/span> canvas &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>Canvas&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;span style="color:#66d9ef">auto&lt;/span> execution_queue &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>queue&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Command&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>();
&lt;span style="color:#66d9ef">auto&lt;/span> execution_history &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>list&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Command&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>();
&lt;span style="color:#66d9ef">auto&lt;/span> executer &lt;span style="color:#f92672">=&lt;/span> Executer();
&lt;span style="color:#66d9ef">auto&lt;/span> dumper &lt;span style="color:#f92672">=&lt;/span>
[&lt;span style="color:#f92672">&amp;amp;&lt;/span>canvas, &lt;span style="color:#f92672">&amp;amp;&lt;/span>executer]() {
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;# state&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;## canvas&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
canvas&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Dump();
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;## executer&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
executer.DumpExecutionHistory();
};
dumper();
std&lt;span style="color:#f92672">::&lt;/span>cout&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;# execution phase&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
executer &lt;span style="color:#f92672">+=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>CreateLineDiagramCommand&lt;span style="color:#f92672">&amp;gt;&lt;/span>(canvas);
executer &lt;span style="color:#f92672">+=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>CreateTriangleDiagramCommand&lt;span style="color:#f92672">&amp;gt;&lt;/span>(canvas);
dumper();
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/h2>
&lt;h2 id="hahahugoshortcode-s1-hbhb">
&lt;pre>src/command_pattern.hpp&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#ifndef DESIGN_PATTERN_COMMAND_PATTERN_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DESIGN_PATTERN_COMMAND_PATTERN_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iterator&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;list&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;queue&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sstream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;join.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;demangle.hpp&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">namespace&lt;/span> design_pattern {
&lt;span style="color:#66d9ef">namespace&lt;/span> command_pattern {
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Receiver&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string ToString() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
};
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 描画される図形の抽象クラス
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Diagram&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Receiver {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
Diagram() &lt;span style="color:#f92672">:&lt;/span> height(&lt;span style="color:#ae81ff">0&lt;/span>), width(&lt;span style="color:#ae81ff">0&lt;/span>) {}
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#f92672">~&lt;/span>Diagram() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">int&lt;/span> height;
&lt;span style="color:#66d9ef">int&lt;/span> width;
std&lt;span style="color:#f92672">::&lt;/span>string ToString() {
std&lt;span style="color:#f92672">::&lt;/span>stringstream ss;
ss &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> demangle(&lt;span style="color:#66d9ef">typeid&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>)) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;(&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>height &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>width &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> ss.str();
}
};
Diagram&lt;span style="color:#f92672">::~&lt;/span>Diagram() {}
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 図形が描画されるキャンバス
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Canvas&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Receiver {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> AddDiagram(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram) {
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagrams.push_back(diagram);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Dump&lt;/span>() {
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagrams.size() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString()
&lt;span style="color:#f92672">:&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string(&lt;span style="color:#e6db74">&amp;#34;empty&amp;#34;&lt;/span>))
&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
}
std&lt;span style="color:#f92672">::&lt;/span>string ToString() {
&lt;span style="color:#66d9ef">auto&lt;/span> messages &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
std&lt;span style="color:#f92672">::&lt;/span>transform(
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagrams.begin(), &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>diagrams.end(),
std&lt;span style="color:#f92672">::&lt;/span>back_inserter(messages),
[](std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&lt;/span> diagram) { &lt;span style="color:#66d9ef">return&lt;/span> diagram&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString(); });
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, messages);
}
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Diagram&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> diagrams;
};
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 線分を表現するクラス
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Line&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Diagram {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
Line() { &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>width &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>; }
};
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * 三角形を表現するクラス
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Triangle&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Diagram {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
Triangle() {
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>width &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>height &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
}
};
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * コマンドの抽象クラス
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Command&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
Command(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>Canvas&lt;span style="color:#f92672">&amp;gt;&lt;/span> canvas_)
&lt;span style="color:#f92672">:&lt;/span> canvas(canvas_) {}
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Execute&lt;/span>() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string ToString() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Canvas&lt;span style="color:#f92672">&amp;gt;&lt;/span> canvas;
};
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * 線分の生成を担うコマンド
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CreateLineDiagramCommand&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Command {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
CreateLineDiagramCommand(
std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>Canvas&lt;span style="color:#f92672">&amp;gt;&lt;/span> canvas_)
&lt;span style="color:#f92672">:&lt;/span> Command(canvas_) {}
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Execute&lt;/span>() {
&lt;span style="color:#66d9ef">auto&lt;/span> new_diagram &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>Line&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>canvas&lt;span style="color:#f92672">-&amp;gt;&lt;/span>AddDiagram(new_diagram);
}
&lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string ToString() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">demangle&lt;/span>(&lt;span style="color:#66d9ef">typeid&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>)); }
};
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * 三角形の生成を担うコマンド
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CreateTriangleDiagramCommand&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Command {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
CreateTriangleDiagramCommand(
std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>design_pattern&lt;span style="color:#f92672">::&lt;/span>command_pattern&lt;span style="color:#f92672">::&lt;/span>Canvas&lt;span style="color:#f92672">&amp;gt;&lt;/span> canvas_)
&lt;span style="color:#f92672">:&lt;/span> Command(canvas_) {
&lt;span style="color:#66d9ef">auto&lt;/span> new_diagram &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>Triangle&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>canvas&lt;span style="color:#f92672">-&amp;gt;&lt;/span>AddDiagram(new_diagram);
}
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Execute&lt;/span>() {}
&lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string ToString() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">demangle&lt;/span>(&lt;span style="color:#66d9ef">typeid&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>)); }
};
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * 図形の移動を担うコマンド
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MoveDiagramCommand&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Command {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Execute() {}
&lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string ToString() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">demangle&lt;/span>(&lt;span style="color:#66d9ef">typeid&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>)); }
};
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * 図形のリサイズを担うコマンド
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ResizeDiagramCommand&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Command {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Execute() {}
&lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string ToString() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">demangle&lt;/span>(&lt;span style="color:#66d9ef">typeid&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>)); }
};
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Executer&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Command&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> execution_history_;
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
Executer &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Command&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>command) {
command&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Execute();
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>execution_history_.push_back(command);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>;
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">DumpExecutionHistory&lt;/span>() {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>execution_history_.size())
std&lt;span style="color:#f92672">::&lt;/span>for_each(
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>execution_history_.begin(), &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>execution_history_.end(),
[idx &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>](&lt;span style="color:#66d9ef">auto&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>command) &lt;span style="color:#66d9ef">mutable&lt;/span> {
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> idx&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> command&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ToString() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
});
&lt;span style="color:#66d9ef">else&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;empty&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
}
};
} &lt;span style="color:#75715e">// namespace command_pattern
&lt;/span>&lt;span style="color:#75715e">&lt;/span>} &lt;span style="color:#75715e">// namespace design_pattern
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#endif
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/h2>
&lt;h2 id="hahahugoshortcode-s2-hbhb">
&lt;pre>src/demangle.hpp&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#ifndef DEMANGLE_HPP_
&lt;/span>&lt;span style="color:#75715e">#define DEMANGLE_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cxxabi.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>string demangle(&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>type_info&lt;span style="color:#f92672">&amp;amp;&lt;/span> id) {
&lt;span style="color:#66d9ef">int&lt;/span> status;
&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> demangled_name &lt;span style="color:#f92672">=&lt;/span> abi&lt;span style="color:#f92672">::&lt;/span>__cxa_demangle(id.name(), &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>status);
&lt;span style="color:#66d9ef">if&lt;/span> (status &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;span style="color:#66d9ef">auto&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string(demangled_name);
free(demangled_name);
&lt;span style="color:#66d9ef">return&lt;/span> result;
}
&lt;span style="color:#66d9ef">throw&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>exception();
}
&lt;span style="color:#75715e">#endif
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/h2>
&lt;pre>src/join.hpp&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#ifndef JOIN_HPP_
&lt;/span>&lt;span style="color:#75715e">#define JOIN_HPP_
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;numeric&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>string Join(&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string &lt;span style="color:#f92672">&amp;amp;&lt;/span>delimitor,
&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>messages) {
&lt;span style="color:#66d9ef">return&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>accumulate(
std&lt;span style="color:#f92672">::&lt;/span>next(messages.begin()), messages.end(), messages[&lt;span style="color:#ae81ff">0&lt;/span>],
[delimitor](std&lt;span style="color:#f92672">::&lt;/span>string a, std&lt;span style="color:#f92672">::&lt;/span>string b) { &lt;span style="color:#66d9ef">return&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> delimitor &lt;span style="color:#f92672">+&lt;/span> b; });
}
&lt;span style="color:#75715e">#endif
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="実行結果">実行結果&lt;/h3>
&lt;pre>&lt;code>$ clang++ src/command_pattern.cpp -o command_pattern.out &amp;amp;&amp;amp; ./command_pattern.out
# state
## canvas
empty
## executer
empty
# execution phase
# state
## canvas
design_pattern::command_pattern::Line (0,10)
design_pattern::command_pattern::Triangle (5,10)
## executer
0: design_pattern::command_pattern::CreateLineDiagramCommand
1: design_pattern::command_pattern::CreateTriangleDiagramCommand
&lt;/code>&lt;/pre></content></item></channel></rss>